/**
 * @description       : Ï∫òÎ¶∞Îçî Ïª®ÌÖåÏù¥ÎÑà Î©îÏù∏ Ïª¥Ìè¨ÎÑåÌä∏
 * @author            : sejin.park@dkbmc.com
 */
import { LightningElement, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

// Apex Î©îÏÜåÎìú import
import saveEventAndCosts from '@salesforce/apex/CalendarAppController.saveEventAndCosts';
import getEventDetails from '@salesforce/apex/CalendarAppController.getEventDetails';
import deleteEvent from '@salesforce/apex/CalendarAppController.deleteEvent';
import getDepartmentOptions from '@salesforce/apex/CalendarAppController.getDepartmentOptions';
import getCostTypeOptions from '@salesforce/apex/CalendarAppController.getCostTypeOptions';

export default class CalendarContainer extends LightningElement {
    @track isModalOpen = false;
    @track modalTitle = '';
    @track currentMonthForSummary;

    // Î™®Îã¨ ÌïÑÎìú Î≥ÄÏàò
    @track recordId = null;
    @track eventTitle = '';
    @track eventStartDate = '';
    @track eventEndDate = '';
    @track eventDescription = '';
    @track eventLocation = '';
    @track eventDepartment = '';
    @track costItems = [];
    @track newEventData = { extendedProps: {} };
    
    @track departmentPicklistOptions = [];
    @track costTypePicklistOptions = [];
    
    get isSalesforceObjectEvent() { 
        return this.newEventData?.extendedProps?.recordType !== 'Personal'; 
    }
    
    get isPersonalActivityEvent() { 
        return this.newEventData?.extendedProps?.recordType === 'Personal'; 
    }
    
    get displayAccountName() { 
        return this.newEventData?.extendedProps?.accountName || ''; 
    }
    
    get departmentOptions() { 
        return this.departmentPicklistOptions; 
    }
    
    get costTypeOptions() { 
        return this.costTypePicklistOptions; 
    }

    connectedCallback() {
        const today = new Date();
        this.currentMonthForSummary = today.toISOString();
        this.loadPicklistOptions();
    }

    async loadPicklistOptions() {
        try {
            const [departmentOptions, costTypeOptions] = await Promise.all([
                getDepartmentOptions(),
                getCostTypeOptions()
            ]);
            
            this.departmentPicklistOptions = departmentOptions;
            this.costTypePicklistOptions = costTypeOptions;
        } catch (error) {
            console.error('Error loading picklist options:', error);
            this.showToast('Ïò§Î•ò', 'ÏòµÏÖòÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
        }
    }
    
    // Ïù¥Î≤§Ìä∏ ÎìúÎ°≠ Ï≤òÎ¶¨
    handleEventDrop(event) {
        try {
            const { draggedEl, date } = event.detail;
            
            if (!draggedEl || !date) {
                throw new Error('ÎìúÎ°≠ Ïù¥Î≤§Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
            }
            
            const { recordName, recordType, recordId, accountName } = draggedEl.dataset;

            if (!recordName || !recordType) {
                throw new Error('ÎìúÎûòÍ∑∏Îêú Ìï≠Î™©Ïùò Îç∞Ïù¥ÌÑ∞Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
            }

            this.recordId = null;
            this.eventTitle = recordName;
            this.eventDepartment = this.departmentPicklistOptions.length > 0 ? this.departmentPicklistOptions[0].value : '';
            this.eventDescription = '';
            this.eventLocation = '';

            // üëá Î≥µÏû°Ìïú Î≥ÄÌôò Î°úÏßÅÏùÑ Î™®Îëê Ï†úÍ±∞ÌïòÍ≥†, Î∞õÏùÄ date Í∞ùÏ≤¥Î•º Î∞îÎ°ú GMT ÌëúÏ§Ä ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò.
            this.eventStartDate = date.toISOString();
            this.eventEndDate = date.toISOString();

            this.newEventData = { extendedProps: { recordType, relatedId: recordId, accountName: accountName || '' } };
            this.costItems = [{ id: 0, type: '', amount: null }];
            this.modalTitle = `ÏÉà ${recordType === 'Personal' ? 'ÌôúÎèô' : 'Ïù¥Î≤§Ìä∏'}: ${recordName}`;
            this.openModal();
            
        } catch (error) {
            console.error('Ïù¥Î≤§Ìä∏ ÎìúÎ°≠ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
            this.showToast('Ïò§Î•ò', error.message || 'ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
        }
    }

    // Ïù¥Î≤§Ìä∏ ÌÅ¥Î¶≠ Ï≤òÎ¶¨
    async handleEventClick(event) {
        this.recordId = event.detail.eventId;
        if (!this.recordId) return;

        try {
            const result = await getEventDetails({ eventId: this.recordId });
            const evt = result.event;

            this.eventTitle = evt.Title__c || '';
            this.eventStartDate = evt.Start_Date__c;
            this.eventEndDate = evt.End_Date__c;
            this.eventDescription = evt.Description__c || '';
            this.eventLocation = evt.Location__c || '';

            console.log('Value passed to modal:', this.eventStartDate);
            
            // Î∂ÄÏÑú Ï†ïÎ≥¥ ÏÑ§Ï†ï
            if (result.costs && result.costs.length > 0 && result.costs[0].department__c) {
                this.eventDepartment = result.costs[0].department__c;
            } else {
                this.eventDepartment = this.departmentPicklistOptions.length > 0 ? this.departmentPicklistOptions[0].value : '';
            }
            
            // Í¥ÄÎ†® Î†àÏΩîÎìú Ï†ïÎ≥¥ ÏÑ§Ï†ï
            this.newEventData = {
                extendedProps: {
                    recordType: evt.Related_Record_Type__c,
                    relatedId: evt.Related_Record_Id__c,
                    accountName: result.accountName || ''
                }
            };
            
            // ÎπÑÏö© ÏïÑÏù¥ÌÖú ÏÑ§Ï†ï
            this.costItems = result.costs && result.costs.length > 0 
                ? result.costs.map((c, i) => ({ 
                    id: i, 
                    type: c.Cost_Type__c, 
                    amount: c.Amount__c 
                }))
                : [{ id: 0, type: '', amount: null }];

            this.modalTitle = `Ïù¥Î≤§Ìä∏ ÏàòÏ†ï: ${evt.Title__c}`;
            this.openModal();
        } catch (error) {
            console.error('Error loading event details:', error);
            this.showToast('Ïò§Î•ò', 'Ïù¥Î≤§Ìä∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
        }
    }

    // Ïù¥Î≤§Ìä∏ Ïù¥Îèô ÏÑ±Í≥µ Ï≤òÎ¶¨
    handleEventMoved(event) {
        this.showToast('ÏÑ±Í≥µ', event.detail.message, 'success');
        this.refreshCostSummary();
    }

    // Ïù¥Î≤§Ìä∏ Ïò§Î•ò Ï≤òÎ¶¨
    handleEventError(event) {
        this.showToast('Ïò§Î•ò', event.detail.message, 'error');
    }
    
    // ÎÇ†Ïßú Î≥ÄÍ≤Ω Ï≤òÎ¶¨
    handleDatesSet(event) { 
        // Ï∫òÎ¶∞ÎçîÏóêÏÑú ÌëúÏãúÌïòÎäî ÏõîÏùò Ï§ëÍ∞Ñ ÎÇ†ÏßúÎ•º Í∞ÄÏ†∏ÏôÄÏÑú Ìï¥Îãπ ÏõîÎ°ú ÏÑ§Ï†ï
        const startDate = new Date(event.detail.start);
        const endDate = new Date(event.detail.end);
        
        // Ï∫òÎ¶∞Îçî Î∑∞Ïùò Ï§ëÍ∞Ñ ÎÇ†Ïßú Í≥ÑÏÇ∞ (Ïõî Ï§ëÍ∞Ñ Ï†ïÎèÑ)
        const viewMiddle = new Date(startDate.getTime() + (endDate.getTime() - startDate.getTime()) / 2);
        
        console.log('DatesSet event:', {
            start: event.detail.start,
            end: event.detail.end,
            viewMiddle: viewMiddle.toISOString()
        });
        
        this.currentMonthForSummary = viewMiddle.toISOString();
        this.refreshCostSummary();
    }
    
    // ÏûÖÎ†• ÌïÑÎìú Î≥ÄÍ≤Ω Ï≤òÎ¶¨
    handleInputChange(event) { 
        this[event.target.name] = event.target.value; 
    }

    // ÎπÑÏö© Ìï≠Î™© Î≥ÄÍ≤Ω Ï≤òÎ¶¨
    handleCostChange(event) {
        const itemId = parseInt(event.target.dataset.id, 10);
        const { name, value } = event.target;
        this.costItems = this.costItems.map(item => 
            item.id === itemId ? { ...item, [name]: value } : item
        );
    }
    
    // ÎπÑÏö© Ìï≠Î™© Ï∂îÍ∞Ä
    addCostItem() { 
        this.costItems = [...this.costItems, { 
            id: this.costItems.length, 
            type: '', 
            amount: null 
        }]; 
    }
    
    // Ïù¥Î≤§Ìä∏ Ï†ÄÏû• - ÌïµÏã¨ Î°úÏßÅÏóêÎßå ÏòàÏô∏ Ï≤òÎ¶¨ Ï∂îÍ∞Ä
    async saveEvent() {
        // Í∏∞Î≥∏ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if (!this.eventTitle) {
            this.showToast('ÏûÖÎ†• Ïò§Î•ò', 'Ï†úÎ™©ÏùÄ ÌïÑÏàò ÏûÖÎ†• Ìï≠Î™©ÏûÖÎãàÎã§.', 'error');
            return;
        }

        if (!this.eventDepartment && this.isSalesforceObjectEvent) {
            this.showToast('ÏûÖÎ†• Ïò§Î•ò', 'Î∂ÄÏÑúÎäî ÌïÑÏàò ÏÑ†ÌÉù Ìï≠Î™©ÏûÖÎãàÎã§.', 'error');
            return;
        }

        try {
            // Ïú†Ìö®Ìïú ÎπÑÏö© Ìï≠Î™©Îßå ÌïÑÌÑ∞ÎßÅ
            const validCostItems = this.costItems
                .filter(item => item.type && item.amount && Number(item.amount) > 0)
                .map(item => ({
                    type: String(item.type),
                    amount: Number(item.amount)
                }));

            const params = {
                recordId: this.recordId,
                title: this.eventTitle,
                startDate: this.eventStartDate,
                endDate: this.eventEndDate, 
                description: this.eventDescription,
                location: this.eventLocation,
                department: this.eventDepartment,
                relatedId: this.newEventData?.extendedProps?.relatedId,
                recordType: this.newEventData?.extendedProps?.recordType,
                costDetailsJson: JSON.stringify(validCostItems)
            };
            
            const savedEventId = await saveEventAndCosts(params);
            
            // Ï∫òÎ¶∞Îçî ÏóÖÎç∞Ïù¥Ìä∏
            const calendarView = this.template.querySelector('c-calendar-view');
            if (calendarView) {
                if (this.recordId) {
                    calendarView.updateEvent(this.recordId, {
                        title: this.eventTitle,
                        start: this.eventStartDate,
                        end: this.eventEndDate
                    });
                } else {
                    calendarView.addEvent({
                        id: savedEventId,
                        title: this.eventTitle,
                        start: this.eventStartDate,
                        end: this.eventEndDate,
                        allDay: false
                    });
                }
            }
            
            this.showToast('ÏÑ±Í≥µ', 'Ïù¥Î≤§Ìä∏Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.', 'success');
            this.closeModal();
            this.refreshCostSummary();
            
        } catch (error) {
            console.error('Ïù¥Î≤§Ìä∏ Ï†ÄÏû• Ïò§Î•ò:', error);
            const errorMessage = error.body?.message || error.message || 'Ïù¥Î≤§Ìä∏ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
            this.showToast('Ï†ÄÏû• Ïò§Î•ò', errorMessage, 'error');
        }
    }

    // Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú - ÌïµÏã¨ Î°úÏßÅÏóêÎßå ÏòàÏô∏ Ï≤òÎ¶¨ Ï∂îÍ∞Ä
    async handleDelete() {
        if (!this.recordId) return;
        
        try {
            await deleteEvent({ eventId: this.recordId });
            
            const calendarView = this.template.querySelector('c-calendar-view');
            if (calendarView) {
                calendarView.removeEvent(this.recordId);
            }
            
            this.showToast('ÏÑ±Í≥µ', 'ÏùºÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.', 'success');
            this.closeModal();
            this.refreshCostSummary();
            
        } catch (error) {
            console.error('Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú Ïò§Î•ò:', error);
            const errorMessage = error.body?.message || error.message || 'ÏùºÏ†ï ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
            this.showToast('ÏÇ≠Ï†ú Ïò§Î•ò', errorMessage, 'error');
        }
    }

    // ÎπÑÏö© ÏöîÏïΩ ÏÉàÎ°úÍ≥†Ïπ®
    refreshCostSummary() {
        const costSummaryPanel = this.template.querySelector('c-cost-summary-panel');
        if (costSummaryPanel) {
            costSummaryPanel.updateMonth(this.currentMonthForSummary);
            costSummaryPanel.refreshSummary();
        }
    }

    // Î™®Îã¨ Í¥ÄÎ†® Ìï®ÏàòÎì§
    openModal() { 
        this.isModalOpen = true; 
    }

    closeModal() {
        this.isModalOpen = false;
        this.recordId = null;
        this.eventTitle = '';
        this.eventStartDate = '';
        this.eventEndDate = '';
        this.eventDescription = '';
        this.eventLocation = '';
        this.eventDepartment = '';
        this.costItems = [];
        this.newEventData = { extendedProps: {} };
    }
    
    showToast(title, message, variant) {
        this.dispatchEvent(new ShowToastEvent({ title, message, variant }));
    }
}